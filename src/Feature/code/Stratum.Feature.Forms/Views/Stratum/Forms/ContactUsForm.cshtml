@using Stratum.Feature.Forms.Models
@using Sitecore.Mvc
@using Stratum.Foundation.Common
@using Stratum.Foundation.Common.Models
@using Stratum.Foundation.Common.Utilities
@using Stratum.Foundation.Common.Services
@using System.Web.Mvc
@model ContactUsForm
@{
    Layout = null;
    bool isExperienceEditor = SitecoreUtility.IsExperienceEditorMode();
    BaseRenderingParams brParams = new CommonService().GetBaseRenderingParams();
}

@if (Model != null)
{
    <section id="@brParams.SectionId">
        <div class="container">
            <div class="row justify-content-center" data-aos="fade-up" style="margin-top:-45px;">
                <div class="col-lg-10">
                    @using (Ajax.BeginForm("SaveContactUsFormData", "ContactUs",
                    new AjaxOptions
                    {
                        HttpMethod = "Post",
                        OnBegin = "OnBegin_SaveCuFD",
                        OnSuccess = "OnSuccess_SaveCuFD",
                        OnFailure = "OnFailure_SaveCuFD"
                    }, new { @class = "php-email-form", id = "formContactUs" }))
                    {
                        @Html.AntiForgeryToken()

                        <div class="row">
                            <div class="col-md-6 form-group">
                                @Html.TextBoxFor(x => x.Name, new { @class = "form-control", type = "text", maxlength = "50", autocomplete = "off", id = "Name", placeholder = CommonDictionaryValues.Labels.Name })
                                @Html.ValidationMessageFor(x => x.Name, null, "span")
                            </div>
                            <div class="col-md-6 form-group mt-3 mt-md-0">
                                @Html.TextBoxFor(x => x.Email, new { @class = "form-control", type = "email", maxlength = "50", autocomplete = "off", id = "Email", placeholder = CommonDictionaryValues.Labels.Email })
                                @Html.ValidationMessageFor(x => x.Email, null, "span")
                            </div>
                        </div>
                        <div class="form-group mt-3">
                            @Html.TextBoxFor(x => x.Subject, new { @class = "form-control", type = "text", maxlength = "100", autocomplete = "off", id = "Subject", placeholder = CommonDictionaryValues.Labels.Subject })
                            @Html.ValidationMessageFor(x => x.Subject, null, "span")
                        </div>
                        <div class="form-group mt-3">
                            @Html.TextAreaFor(x => x.Message, new { @class = "form-control", rows = "5", maxlength = "300", autocomplete = "off", id = "Message", placeholder = CommonDictionaryValues.Labels.Message })
                            @Html.ValidationMessageFor(x => x.Message, null, "span")
                        </div>
                        <div class="text-center"><button id="btnCufSubmit" type="submit">@CommonDictionaryValues.Labels.Submit</button></div>
                    }
                </div>
            </div>
        </div>
    </section>

    <script>
        ///Wait until jquery loads in page
        var readyCuf = (callbackCuf) => {
            if (document.readyState != "loading") {
                callbackCuf();
            }
            else {
                document.addEventListener("DOMContentLoaded", callbackCuf);
            }
        }

        readyCuf(() => {

            $("#btnCufSubmit").click(function () {
                $("#formContactUs .field-validation-error").html("");
            });
        });

        function OnBegin_SaveCuFD() {
            app.ShowWaitModal();
            app.DisableForm();
        }

        function OnSuccess_SaveCuFD(data) {
            setTimeout(function () {
                //console.log(data);
                app.EnableForm();
                app.HideWaitModal();
                if (data != null && data != undefined) {
                    if (data.StatusCode == 1) {
                        app.DefaultResetForm();
                        app.ShowToastr(false, app.status.Success, data.StatusMessage);
                    }
                    else {
                        app.ShowToastr(true, app.status.Error, data.StatusMessage);
                        console.log(data);
                    }
                }
            }, 2000);
        }

        function OnFailure_SaveCuFD(data) {
            app.HideWaitModal();
            app.EnableForm();
            app.ShowToastr(true, app.status.Error, data.StatusMessage);
            console.log(data);
        }
    </script>
}
else
{
    <span></span>
}
